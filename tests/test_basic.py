# tests/test_basic.py
import pytest
import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire parent au path Python
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

def test_imports():
    """Test que toutes les imports principales fonctionnent"""
    try:
        # Test des imports de base
        import fastapi
        import uvicorn
        import sqlalchemy
        import pydantic
        import streamlit
        import requests
        import langchain
        import langgraph
        import spacy
        import httpx
        
        print("‚úÖ Tous les imports de base fonctionnent")
        
    except ImportError as e:
        pytest.fail(f"‚ùå Import manquant: {e}")

def test_config():
    """Test que la configuration se charge correctement"""
    try:
        from app.config import settings
        
        # V√©rifier que les param√®tres essentiels sont d√©finis
        assert settings.APP_NAME == "SAC-DJ"
        assert settings.SECRET_KEY is not None
        assert settings.OLLAMA_BASE_URL is not None
        assert settings.LLM_MODEL is not None
        
        print("‚úÖ Configuration charg√©e correctement")
        
    except Exception as e:
        pytest.fail(f"‚ùå Erreur de configuration: {e}")

def test_database_models():
    """Test que les mod√®les de base de donn√©es sont valides"""
    try:
        from app.models import database_models as db_m
        from app.database import Base
        
        # V√©rifier que les classes principales existent
        assert hasattr(db_m, 'User')
        assert hasattr(db_m, 'Document')
        assert hasattr(db_m, 'Classification')
        assert hasattr(db_m, 'HumanValidation')
        
        # V√©rifier que les √©num√©rations existent
        assert hasattr(db_m, 'UserRole')
        assert hasattr(db_m, 'DocumentStatus')
        assert hasattr(db_m, 'ClassificationResult')
        
        print("‚úÖ Mod√®les de base de donn√©es valides")
        
    except Exception as e:
        pytest.fail(f"‚ùå Erreur mod√®les BDD: {e}")

def test_ollama_service():
    """Test que le service Ollama se cr√©e correctement"""
    try:
        from app.services.ollama_service import ollama_service
        
        # V√©rifier que le service a les m√©thodes n√©cessaires
        assert hasattr(ollama_service, 'health_check')
        assert hasattr(ollama_service, 'is_model_available')
        assert hasattr(ollama_service, 'generate_completion')
        assert hasattr(ollama_service, 'extract_entities_with_llm')
        
        print("‚úÖ Service Ollama cr√©√© correctement")
        
    except Exception as e:
        pytest.fail(f"‚ùå Erreur service Ollama: {e}")

def test_langgraph_components():
    """Test que les composants LangGraph sont valides"""
    try:
        from app.core.state import CSPEState, CritereAnalysis
        from app.core.nodes import extract_entities
        from app.core.graph import create_cspe_workflow
        
        # V√©rifier que les types TypedDict sont corrects
        assert CSPEState is not None
        assert CritereAnalysis is not None
        
        # V√©rifier que les fonctions nodes existent
        assert callable(extract_entities)
        
        # V√©rifier que le workflow peut √™tre cr√©√©
        workflow = create_cspe_workflow()
        assert workflow is not None
        
        print("‚úÖ Composants LangGraph valides")
        
    except Exception as e:
        pytest.fail(f"‚ùå Erreur LangGraph: {e}")

def test_api_routes():
    """Test que les routes API sont d√©finies"""
    try:
        from app.api import documents, auth, analytics, validation
        
        # V√©rifier que les routeurs existent
        assert hasattr(documents, 'router')
        assert hasattr(auth, 'router')
        assert hasattr(analytics, 'router')
        assert hasattr(validation, 'router')
        
        print("‚úÖ Routes API d√©finies")
        
    except Exception as e:
        pytest.fail(f"‚ùå Erreur routes API: {e}")

def test_spacy_model():
    """Test que le mod√®le spaCy fran√ßais est disponible"""
    try:
        import spacy
        
        # Essayer de charger le mod√®le fran√ßais
        try:
            nlp = spacy.load("fr_core_news_lg")
            
            # Test basique
            doc = nlp("Ceci est un test.")
            assert len(doc) > 0
            
            print("‚úÖ Mod√®le spaCy fran√ßais disponible")
            
        except OSError:
            print("‚ö†Ô∏è Mod√®le spaCy fran√ßais non install√© - lancez: python -m spacy download fr_core_news_lg")
            
    except Exception as e:
        pytest.fail(f"‚ùå Erreur spaCy: {e}")

def test_file_structure():
    """Test que la structure de fichiers est correcte"""
    project_root = Path(__file__).parent.parent
    
    # Fichiers essentiels
    essential_files = [
        "app/main.py",
        "app/config.py", 
        "app/database.py",
        "init_db.py",
        "requirements.txt",
        ".env.example"
    ]
    
    for file_path in essential_files:
        full_path = project_root / file_path
        assert full_path.exists(), f"Fichier manquant: {file_path}"
    
    # Dossiers essentiels
    essential_dirs = [
        "app/api",
        "app/core",
        "app/models", 
        "app/services",
        "frontend",
        "tests"
    ]
    
    for dir_path in essential_dirs:
        full_path = project_root / dir_path
        assert full_path.exists(), f"Dossier manquant: {dir_path}"
    
    print("‚úÖ Structure de fichiers correcte")

def test_environment_file():
    """Test que le fichier .env.example est valide"""
    project_root = Path(__file__).parent.parent
    env_file = project_root / ".env.example"
    
    if env_file.exists():
        content = env_file.read_text()
        
        # V√©rifier que les variables essentielles sont pr√©sentes
        required_vars = [
            "SECRET_KEY",
            "OLLAMA_BASE_URL", 
            "LLM_MODEL",
            "DATABASE_URL",
            "FIRST_ADMIN_EMAIL"
        ]
        
        for var in required_vars:
            assert var in content, f"Variable manquante dans .env.example: {var}"
        
        print("‚úÖ Fichier .env.example valide")
    else:
        pytest.fail("‚ùå Fichier .env.example manquant")

if __name__ == "__main__":
    """Ex√©cution directe des tests"""
    print("üß™ === TESTS DE VALIDATION SAC-DJ ===")
    print()
    
    tests = [
        test_imports,
        test_config,
        test_database_models,
        test_ollama_service,
        test_langgraph_components,
        test_api_routes,
        test_spacy_model,
        test_file_structure,
        test_environment_file
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            test()
            passed += 1
        except Exception as e:
            print(f"‚ùå {test.__name__}: {e}")
    
    print()
    print(f"üìä R√©sultats: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! Le projet est pr√™t.")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez l'installation.")