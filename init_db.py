# init_db.py
import os
import sys
from pathlib import Path

# Ajouter le r√©pertoire parent au path Python
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from sqlalchemy import text
from app.database import engine, Base, SessionLocal
from app.models import database_models
from app.config import settings
from app.api.auth import get_password_hash
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_tables():
    """Cr√©e toutes les tables de la base de donn√©es"""
    logger.info("üóÑÔ∏è Cr√©ation des tables de la base de donn√©es...")
    
    try:
        # Cr√©er toutes les tables d√©finies dans les mod√®les
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ Tables cr√©√©es avec succ√®s")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        return False

def create_admin_user():
    """Cr√©e l'utilisateur administrateur par d√©faut"""
    logger.info("üë§ Cr√©ation de l'utilisateur administrateur...")
    
    db = SessionLocal()
    try:
        # V√©rifier si l'admin existe d√©j√†
        existing_admin = db.query(database_models.User).filter(
            database_models.User.email == settings.FIRST_ADMIN_EMAIL
        ).first()
        
        if existing_admin:
            logger.info(f"‚ÑπÔ∏è L'utilisateur admin existe d√©j√†: {settings.FIRST_ADMIN_EMAIL}")
            return True
        
        # Cr√©er l'utilisateur admin
        hashed_password = get_password_hash(settings.FIRST_ADMIN_PASSWORD)
        admin_user = database_models.User(
            email=settings.FIRST_ADMIN_EMAIL,
            full_name="Administrateur Syst√®me",
            hashed_password=hashed_password,
            role=database_models.UserRole.ADMIN,
            is_active=True
        )
        
        db.add(admin_user)
        db.commit()
        db.refresh(admin_user)
        
        logger.info(f"‚úÖ Utilisateur admin cr√©√©: {settings.FIRST_ADMIN_EMAIL}")
        logger.info(f"üîë Mot de passe: {settings.FIRST_ADMIN_PASSWORD}")
        logger.info("‚ö†Ô∏è IMPORTANT: Changez ce mot de passe en production !")
        
        return True
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå Erreur lors de la cr√©ation de l'admin: {e}")
        return False
    finally:
        db.close()

def create_sample_data():
    """Cr√©e des donn√©es d'exemple pour le d√©veloppement"""
    if not settings.DEBUG:
        logger.info("‚ÑπÔ∏è Donn√©es d'exemple ignor√©es (pas en mode debug)")
        return
    
    logger.info("üìä Cr√©ation de donn√©es d'exemple...")
    
    db = SessionLocal()
    try:
        # V√©rifier si des documents existent d√©j√†
        existing_docs = db.query(database_models.Document).count()
        if existing_docs > 0:
            logger.info("‚ÑπÔ∏è Des documents existent d√©j√†, pas de donn√©es d'exemple cr√©√©es")
            return
        
        # Cr√©er quelques documents d'exemple
        sample_documents = [
            {
                "filename": "recours_exemple_1.txt",
                "content": "Monsieur le Pr√©sident, Je soussign√©, Jean DUPONT, demeurant 123 Rue de la Paix, 75001 Paris, ai l'honneur de former un recours contre la d√©cision de raccordement CSPE du 15 mars 2024...",
                "status": database_models.DocumentStatus.COMPLETED
            },
            {
                "filename": "recours_exemple_2.txt", 
                "content": "Madame, Monsieur, La soci√©t√© SARL EXEMPLE, repr√©sent√©e par son g√©rant Monsieur Martin MARTIN, conteste par la pr√©sente la d√©cision de refus de raccordement du 20 f√©vrier 2024...",
                "status": database_models.DocumentStatus.NEEDS_REVIEW
            }
        ]
        
        for i, doc_data in enumerate(sample_documents):
            # Cr√©er le document
            import hashlib
            content_hash = hashlib.sha256(doc_data["content"].encode()).hexdigest()[:16]
            
            document = database_models.Document(
                filename=doc_data["filename"],
                content_hash=content_hash,
                file_size=len(doc_data["content"]),
                content_type="text/plain",
                file_path=f"samples/{doc_data['filename']}",
                status=doc_data["status"],
                uploaded_by_id="admin-sample"  # ID fictif pour les exemples
            )
            
            db.add(document)
            db.flush()  # Pour obtenir l'ID
            
            # Cr√©er une classification d'exemple
            if i == 0:  # Premier document : RECEVABLE
                classification = database_models.Classification(
                    document_id=document.id,
                    result=database_models.ClassificationResult.RECEVABLE,
                    justification="Tous les crit√®res sont respect√©s : d√©lai conforme (recours form√© 45 jours apr√®s notification), demandeur qualifi√© (personne directement concern√©e), objet clairement d√©fini (contestation d√©cision de raccordement), pi√®ces justificatives compl√®tes.",
                    confidence_score=0.94,
                    analysis_steps={
                        "deadline_analysis": {"is_compliant": True, "confidence": 0.95},
                        "quality_analysis": {"is_compliant": True, "confidence": 0.92}, 
                        "object_analysis": {"is_compliant": True, "confidence": 0.96},
                        "documents_analysis": {"is_compliant": True, "confidence": 0.93}
                    },
                    processing_time_ms=3247,
                    model_version="mistral:7b-instruct"
                )
            else:  # Deuxi√®me document : Besoin de r√©vision
                classification = database_models.Classification(
                    document_id=document.id,
                    result=database_models.ClassificationResult.REQUIRES_REVIEW,
                    justification="Analyse incertaine : d√©lai limite (exactement 60 jours), qualit√© du demandeur √† v√©rifier (soci√©t√© vs d√©cision individuelle), pi√®ces justificatives incompl√®tes.",
                    confidence_score=0.67,
                    analysis_steps={
                        "deadline_analysis": {"is_compliant": True, "confidence": 0.71},
                        "quality_analysis": {"is_compliant": False, "confidence": 0.58},
                        "object_analysis": {"is_compliant": True, "confidence": 0.84},
                        "documents_analysis": {"is_compliant": False, "confidence": 0.55}
                    },
                    processing_time_ms=4156,
                    model_version="mistral:7b-instruct"
                )
            
            db.add(classification)
        
        db.commit()
        logger.info("‚úÖ Donn√©es d'exemple cr√©√©es")
        
    except Exception as e:
        db.rollback()
        logger.error(f"‚ùå Erreur lors de la cr√©ation des donn√©es d'exemple: {e}")
    finally:
        db.close()

def verify_database():
    """V√©rifie que la base de donn√©es fonctionne correctement"""
    logger.info("üîç V√©rification de la base de donn√©es...")
    
    db = SessionLocal()
    try:
        # Test de connexion simple
        result = db.execute(text("SELECT 1")).scalar()
        if result != 1:
            raise Exception("Test de connexion √©chou√©")
        
        # Compter les tables
        if settings.is_sqlite:
            tables_count = db.execute(text(
                "SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%'"
            )).scalar()
        else:
            tables_count = db.execute(text(
                "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public'"
            )).scalar()
        
        logger.info(f"‚úÖ Base de donn√©es op√©rationnelle - {tables_count} tables")
        
        # Compter les utilisateurs
        users_count = db.query(database_models.User).count()
        documents_count = db.query(database_models.Document).count()
        classifications_count = db.query(database_models.Classification).count()
        
        logger.info(f"üìä Donn√©es actuelles:")
        logger.info(f"   üë§ Utilisateurs: {users_count}")
        logger.info(f"   üìÑ Documents: {documents_count}")
        logger.info(f"   üè∑Ô∏è Classifications: {classifications_count}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False
    finally:
        db.close()

def create_directories():
    """Cr√©e les r√©pertoires n√©cessaires"""
    logger.info("üìÅ Cr√©ation des r√©pertoires...")
    
    directories = [
        settings.UPLOAD_DIR,
        "logs",
        "backups",
        "samples"
    ]
    
    for directory in directories:
        path = Path(directory)
        try:
            path.mkdir(exist_ok=True)
            logger.info(f"‚úÖ R√©pertoire cr√©√©/v√©rifi√©: {directory}")
        except Exception as e:
            logger.error(f"‚ùå Erreur cr√©ation r√©pertoire {directory}: {e}")

def init_db():
    """Fonction principale d'initialisation"""
    logger.info("üöÄ === INITIALISATION DE LA BASE DE DONN√âES SAC-DJ ===")
    
    # Afficher la configuration
    logger.info(f"üìã Configuration:")
    logger.info(f"   üóÑÔ∏è Base de donn√©es: {settings.DATABASE_URL}")
    logger.info(f"   ü§ñ Ollama: {settings.OLLAMA_BASE_URL}")
    logger.info(f"   üß† Mod√®le: {settings.LLM_MODEL}")
    logger.info(f"   üìÅ Upload: {settings.UPLOAD_DIR}")
    logger.info(f"   üêõ Debug: {settings.DEBUG}")
    
    success_count = 0
    total_steps = 5
    
    # √âtape 1: Cr√©er les r√©pertoires
    create_directories()
    success_count += 1
    
    # √âtape 2: Cr√©er les tables
    if create_tables():
        success_count += 1
    
    # √âtape 3: Cr√©er l'utilisateur admin
    if create_admin_user():
        success_count += 1
    
    # √âtape 4: V√©rifier la base de donn√©es
    if verify_database():
        success_count += 1
    
    # √âtape 5: Cr√©er des donn√©es d'exemple (seulement en debug)
    if settings.DEBUG:
        create_sample_data()
    success_count += 1
    
    # R√©sum√©
    logger.info("=" * 50)
    if success_count == total_steps:
        logger.info("üéâ INITIALISATION TERMIN√âE AVEC SUCC√àS !")
        logger.info(f"‚úÖ {success_count}/{total_steps} √©tapes r√©ussies")
        
        logger.info("\nüöÄ Prochaines √©tapes:")
        logger.info("1. D√©marrez Ollama: start_ollama.bat")
        logger.info("2. Installez Mistral: install_model.bat")
        logger.info("3. D√©marrez l'API: start_api.bat")
        logger.info("4. D√©marrez l'interface: start_frontend.bat")
        
        logger.info(f"\nüîê Connexion admin:")
        logger.info(f"   Email: {settings.FIRST_ADMIN_EMAIL}")
        logger.info(f"   Mot de passe: {settings.FIRST_ADMIN_PASSWORD}")
        
    else:
        logger.error(f"‚ùå INITIALISATION INCOMPL√àTE: {success_count}/{total_steps} √©tapes r√©ussies")
        logger.error("üîß V√©rifiez les erreurs ci-dessus et relancez le script")
    
    logger.info("=" * 50)

if __name__ == "__main__":
    init_db()