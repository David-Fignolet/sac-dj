import streamlit as st
import os
import requests
import json
from datetime import datetime
from pathlib import Path

# Configuration
UPLOAD_FOLDER = "uploads"
Path(UPLOAD_FOLDER).mkdir(exist_ok=True)

def save_uploaded_file(uploaded_file):
    """Sauvegarde le fichier upload√© et retourne le chemin"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{timestamp}_{uploaded_file.name}"
    file_path = os.path.join(UPLOAD_FOLDER, filename)
    
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    
    return file_path

def analyze_document(file_path):
    """
    Envoie le document √† l'API d'analyse
    √Ä remplacer par un appel r√©el √† votre API
    """
    # Simulation de l'analyse
    return {
        "statut": "RECEVABLE",
        "confiance": 0.92,
        "crit√®res": {
            "d√©lai": {"statut": "Conforme", "d√©tails": "D√©lai respect√© (15 jours sur 60)"},
            "qualit√©": {"statut": "Conforme", "d√©tails": "Demandeur directement concern√©"},
            "objet": {"statut": "Conforme", "d√©tails": "Objet de la contestation valide"},
            "pi√®ces": {"statut": "Conforme", "d√©tails": "Pi√®ces justificatives compl√®tes"}
        },
        "commentaires": "Le document respecte tous les crit√®res de recevabilit√©."
    }

def display_analysis_result(result):
    """Affiche les r√©sultats de l'analyse"""
    st.subheader("üìã R√©sultats de l'analyse")
    
    # Affichage du statut global
    if result["statut"] == "RECEVABLE":
        st.success("‚úÖ Dossier RECEVABLE", icon="‚úÖ")
    else:
        st.error("‚ùå Dossier IRRECEVABLE", icon="‚ùå")
    
    # Score de confiance
    st.metric("Niveau de confiance", f"{result['confiance']*100:.1f}%")
    
    # D√©tails par crit√®re
    st.subheader("Analyse d√©taill√©e")
    for critere, details in result["crit√®res"].items():
        with st.expander(f"üîç {critere.capitalize()}: {details['statut']}"):
            st.write(details["d√©tails"])
    
    # Commentaires
    st.subheader("Commentaires")
    st.info(result["commentaires"])

def render():
    st.title("üìÑ Classification CSPE")
    st.write("T√©l√©chargez un document pour analyse automatique selon les crit√®res CSPE")
    
    # Section d'upload
    uploaded_file = st.file_uploader(
        "T√©l√©versez un document (PDF, DOCX, TXT)",
        type=['pdf', 'docx', 'txt']
    )
    
    if uploaded_file is not None:
        # Aper√ßu du fichier
        st.subheader("üìé Fichier s√©lectionn√©")
        col1, col2 = st.columns(2)
        with col1:
            st.write("**Nom du fichier:**", uploaded_file.name)
            st.write("**Taille:**", f"{uploaded_file.size / 1024:.1f} KB")
        
        # Bouton d'analyse
        if st.button("üöÄ Lancer l'analyse", type="primary", use_container_width=True):
            with st.spinner("Analyse en cours..."):
                try:
                    # Sauvegarde du fichier
                    saved_path = save_uploaded_file(uploaded_file)
                    
                    # Simulation d'analyse
                    analysis_result = analyze_document(saved_path)
                    
                    # Affichage des r√©sultats
                    display_analysis_result(analysis_result)
                    
                    # Bouton de t√©l√©chargement du rapport
                    st.download_button(
                        label="üì• T√©l√©charger le rapport complet",
                        data=json.dumps(analysis_result, indent=2, ensure_ascii=False),
                        file_name=f"rapport_analyse_{uploaded_file.name}.json",
                        mime="application/json"
                    )
                    
                except Exception as e:
                    st.error(f"Erreur lors de l'analyse: {str(e)}")
                    st.exception(e)